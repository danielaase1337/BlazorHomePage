@page "/shoppinglist/{id}"



@if (newVareModel != null)
{
   @* <Modal @ref="_modalRef">
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Legg til vare</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@newVareModel.Name" />
                </Field>
                <Field>
                    <FieldLabel>Enhet</FieldLabel>
                    <TextEdit @bind-Text="@newVareModel.Unit" />
                </Field>
                <Field>
                    <FieldLabel>Kategori</FieldLabel>
                    <div class="row">
                        <div class="col">
                            <Autocomplete @ref="_itemCategoriyAutoComplete" TValue="ItemCategoryModel" TItem="ItemCategoryModel" Data="@AvailableCategories"
                                      TextField="@(f => f.Name)"
                                      ValueField="@(f => f)"
                                      Placeholder="Kategori for varen?"
                                      @onkeyup="@OnItemCategoryListItemKeyUpHandler"
                                      SearchChanged="@searchChangeHandlerItemCat"
                                      SelectedValue="@SelectedItemCategory"
                                      SelectedValueChanged="@(item => SelectedShopItemChanged(item))">
                            </Autocomplete>
                        </div>
                        <div class="col-2">
                            <Tooltip Text="Legg til ny kategori">
                                <Button Clicked="@(f => AddCategory())"><i class="fas fa-plus"></i></Button>
                            </Tooltip>
                        </div>
                    </div>
                </Field>
                @if (newVareModel.ItemCategory != null)
                {
                    <FieldLabel>Valgt kategori: </FieldLabel>
                    <FieldLabel><b>@newVareModel.ItemCategory.Name</b></FieldLabel>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@HideModalAndSave">Lagre og lukk</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>*@
}


@if (ThisShoppingList != null)
{
    <div class="container">
        <div class="row">
            <div class="col">
                <h4 class="@showH2LabelStyle" @ondblclick="@ListHeaderKeyUpEventHandler">@ThisShoppingList.Name</h4>
                <input class="@showEditHeader" @bind-value="@ThisShoppingList.Name" @onkeyup="@(f => ListHeaderClickEventHandler(f))" />
            </div>
            <div class="col-5">
                <MudButton Size="Size.Small" Color="Color.Info" Outline="true" Clicked="SortShoppingList"><i class="fas fa-sort-amount-down-alt"></i></MudButton>
                <MudSelect T="ShopModel" 
                    Label="@dropdownText" 
                    Variant="Variant.Text" 
                    OffsetY="true" Margin="Margin.Dense" 
                    Dense="true" MultiSelection="false"
                    ToStringFunc="@(f=> f.Name)"> 
                    @foreach(var shop in AvailableShops)
                    {
                            <MudSelectItem  OnClick="@(f => SelectedShopClicked(shop))" Value="@shop" />
                    }
                </MudSelect>
            </div>


        </div>

        <div class="row">
            <div class="col">
                
                 <MudAutocomplete 
                 T="ShopItemModel" 
                 Value=@SelectedShopItem
                 SearchFunc="@VareSearch"
                 ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                 ResetValueOnEmptyText="true"
                 Label="Hva skal handles?"
                 OnKeyUp="@OnKeyUpNewListItemHandler"
                 CoerceValue="true"
                 CoerceText="true"
                 > 
                 </MudAutocomplete>
                
                
                
             @*   <Autocomplete @ref="_shopItemAutoComplete" TValue="ShopItemModel" TItem="ShopItemModel" Data="@Varer"
                          TextField="@(f => f.Name)"
                          ValueField="@((item) => item)"
                          Placeholder="Hva skal handles?"
                          @onkeyup="OnKeyUpNewListItemHandler"
                          SelectedValue="@SelectedShopItem"
                          SearchChanged="@searchChangeHandler"
                          SelectedValueChanged="@((item) => SelectedShopItemChanged(item))">
                </Autocomplete>*@
            </div>
            <div class="col-2 contenAlignCenter">
                <MudButton Size="Size.Small"  OnClick="@(AddVare())"><i class="fas fa-plus"></i></MudButton>
            </div>
        </div>
        <div class="row">
            <ul class="todo-list">
                @foreach (var vare in ThisShoppingListItems)
                {
                    <li class="@vare.CssComleteEditClassName">
                        <div class="parent-horizontal-stack">
                            <div class="col-1">
                                <MudCheckBox T="bool" Checked="vare.IsDone" ></MudCheckBox>@*@bind-Checked="@(f => VareCheckChanged(f, vare))"*@
                            </div>
                            <div class="col">
                                @*<a @onclick="@(f => VareClicked(vare.Varen))">
                                    @vare.Varen.Name
                                </a>*@
                            </div>
                            <div class="col-3">
                                <input class="vareInputEdit" @bind-value="vare.Mengde" @onfocusout="(f=> VareMengdeFocusLost())" />
                            </div>
                            <div class="col-2">
                                <button class="commandBtns"
                                @onclick="@(e => DeleteVare(vare))">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>

                    </li>
                }
            </ul>
        </div>

        <div class="row">
            <ListSummaryFooter NItems="@ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).Count()"
                           DeleteAllCompletedClikced="@(f => DeleteAllClicked())"
                           FilterList="@(f=> FilterList(f))"
                           ShowDeleteAll="@(ThisShoppingList.ShoppingItems.Where(f=>f.IsDone).Any())">
            </ListSummaryFooter>
        </div>
    </div>


}
else
{
    <LoadingComponent></LoadingComponent>
}
@code {

    string activeListFiler = "all";
    string showEditHeader = "hidden";
    string showH2LabelStyle = "";
    //void handleChange(ShopItemModel value) => SelectedShopItem = value;
    ShopItemModel newVareModel = new ShopItemModel();
    string _tempVareName;
    string _tempItemCatName;
    string dropdownText = "Velg buikk";
    [Parameter]
    public string Id { get; set; }

    public ShopItemModel SelectedShopItem { get; set; }

    public ItemCategoryModel SelectedItemCategory { get; set; }
    public ShoppingListModel ThisShoppingList { get; set; }
    public ICollection<ShoppingListItemModel> ThisShoppingListItems { get; set; }
    public ICollection<ShopItemModel> Varer { get; set; }
    public ICollection<ItemCategoryModel> AvailableCategories { get; set; }
    ICollection<ShopModel> AvailableShops { get; set; }

    //[Inject]
    //public IShoppingListDataManager ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShoppingListModel> ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShopItemModel> ShopItemsDataManager { get; set; }
    [Inject]
    public IGenericRepository<ItemCategoryModel> ItemsCategoriesDataManager { get; set; }

    [Inject]
    public IGenericRepository<ShopModel> ShopDataManager { get; set; }

    private void test()
    {
    }
     

    protected override async Task OnParametersSetAsync()
    {
        var ok = !string.IsNullOrEmpty(Id);
        if (!ok)
            return;

        ThisShoppingList = await ShoppingListDataManager.Get(Id);
        ThisShoppingListItems = ThisShoppingList.ShoppingItems;

        FilterList(activeListFiler);
        Varer = await ShopItemsDataManager.Get();
        AvailableCategories = await ItemsCategoriesDataManager.Get();

        AvailableShops = await ShopDataManager.Get();

    }

    public async Task DeleteVare(ShoppingListItemModel m)
    {
        ThisShoppingList.ShoppingItems.Remove(m);

        var updated = await ShoppingListDataManager.Update(ThisShoppingList);
        ThisShoppingList = updated;
        FilterList(activeListFiler);
    }

    private string NewVareName { get; set; }

    private  EventCallback<MouseEventArgs> AddVare()
    {
        if (SelectedShopItem == null)
        {
            if (!string.IsNullOrEmpty(_tempVareName))
            {
                newVareModel = new ShopItemModel();
                newVareModel.Name = _tempVareName;
                SelectedItemCategory = null;
                return new EventCallback<MouseEventArgs>();
            }
            else
                return new EventCallback<MouseEventArgs>();
        }

        var newItem = new ShoppingListItemModel() { Mengde = 1, IsDone = false, Varen = SelectedShopItem };
        ThisShoppingList.ShoppingItems.Add(newItem);
        ShoppingListDataManager.Update(ThisShoppingList).ConfigureAwait(false);
        SelectedShopItem = null;
        _tempVareName = string.Empty;

        FilterList(activeListFiler);
        return new EventCallback<MouseEventArgs>();
    }



    private void OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
             AddVare();
    }
    private void OnItemCategoryListItemKeyUpHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
        {
            AddCategory();
        }
    }

    private  async Task AddCategory()
    {
        if (string.IsNullOrEmpty(_tempItemCatName)) return;
        var existing = AvailableCategories.FirstOrDefault(f => f.Name.Equals(_tempItemCatName));
        if (existing != null)
        {
            _tempItemCatName = string.Empty;
            return;
        }

        var itemCat = new ItemCategoryModel();
        itemCat.Name = _tempItemCatName;
        var newCat = await ItemsCategoriesDataManager.Insert(itemCat);
        AvailableCategories.Add(newCat);
        newVareModel.ItemCategory = newCat;
        SelectedItemCategory = newCat;
        SelectedItemCategory = null;
    }
    void VareClicked(ShopItemModel varen)
    {
        newVareModel = varen;
        justUpdateVare = true;
        SelectedItemCategory = null;

    }

    void ListHeaderKeyUpEventHandler()
    {
        showH2LabelStyle = "hidden";
        showEditHeader = "";
    }
    async Task ListHeaderClickEventHandler(KeyboardEventArgs args)
    {

        if (args.Code.Equals("Enter"))
        {
            showH2LabelStyle = "";
            showEditHeader = "hidden";
            await ShoppingListDataManager.Update(ThisShoppingList);
        }
    }
    void SelectedShopItemChanged(object newValue)
    {
        if (newValue == null) return;

        if (newValue is ShopItemModel item)
            SelectedShopItem = item;
        else if (newValue is ItemCategoryModel itemCat)
        {
            SelectedItemCategory = itemCat;
            newVareModel.ItemCategory = itemCat;
            SelectedItemCategory = null;
        }
    }


    void searchChangeHandlerItemCat(string value)
    {
        _tempItemCatName = value;
    }

    void searchChangeHandler(string value)
    {
        _tempVareName = value;
    }

    private async Task<IEnumerable<ShopItemModel>> VareSearch(string value)
    {

        if (string.IsNullOrEmpty(value))
            return Varer as IEnumerable<ShopItemModel>;

        var res  = Varer.Where(f => f.Name.Contains(value,StringComparison.InvariantCultureIgnoreCase)) as IEnumerable<ShopItemModel>;
        if (res.Any()) return res;
        else
        {
            _tempVareName = value;
            return res;
        } 


    }

    private async Task CheckAllItems(bool f)
    {
        foreach (var vare in ThisShoppingList.ShoppingItems)
        {
            vare.IsDone = f;
        }
        await ShoppingListDataManager.Update(ThisShoppingList);

    }
    private EventCallback<bool> VareCheckChanged(object f, ShoppingListItemModel vare)
    {
        if (f is bool bValue)
        {
            vare.IsDone = bValue;
            FilterList(activeListFiler);
            ShoppingListDataManager.Update(ThisShoppingList).ConfigureAwait(false);
        
        }
        return new EventCallback<bool>(); 
    }

    public async Task VareMengdeFocusLost()
    {
        await ShoppingListDataManager.Update(ThisShoppingList);
    }

    public async Task DeleteAllClicked()
    {
        var completed = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
        foreach (var item in completed)
        {
            await ShoppingListDataManager.Delete(item);
            ThisShoppingList.ShoppingItems.Remove(item);
        }
        FilterList(activeListFiler);
    }
    public void FilterList(object value)
    {
        if (value is string sValue)
        {
            activeListFiler = sValue;
            if (activeListFiler.Equals("done"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
            }
            else if (activeListFiler.Equals("active"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).ToList();
            }
            else //all
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems;
            }
        }
    }

    ShopModel SelectedShop { get; set; }
    EventCallback SelectedShopClicked(ShopModel selectedShop)
    {
        SelectedShop = selectedShop;
        dropdownText = selectedShop.Name;
        return new EventCallback();
    }
    void SortShoppingList()
    {
        if (SelectedShop == null) return; //TODO - lag notifikasjon..
                                          //Insert Sort index on itemCats.
        var itemCategoriesWithShortIndex = new List<ItemCategoryModel>();
        foreach (var shelfst in SelectedShop.ShelfsInShop)
        {
            var startSort = shelfst.SortIndex;
            foreach (var cat in shelfst.ItemCateogries)
            {
                startSort += 1;
                cat.SortIndex = startSort;
                itemCategoriesWithShortIndex.Add(cat);
            }
        }

        foreach (var item in ThisShoppingList.ShoppingItems)
        {
            var cat = item.Varen.ItemCategory;
            var thisCatSort = itemCategoriesWithShortIndex.FirstOrDefault(f => f.Id.Equals(cat.Id));
            if (thisCatSort != null)
                item.Varen.ItemCategory.SortIndex = thisCatSort.SortIndex;
        }


        ThisShoppingList.ShoppingItems = ThisShoppingList.ShoppingItems.OrderBy(f => f.Varen.ItemCategory.SortIndex).ToList();
        FilterList(activeListFiler);
    }
    #region Modal handling
    bool justUpdateVare = false;

    //private async Task HideModalAndSave()
    //{

    //    if (newVareModel != null)
    //    {
    //        if (justUpdateVare)
    //            await ShopItemsDataManager.Update(newVareModel);
    //        else
    //        {
    //            await ShopItemsDataManager.Insert(newVareModel);
    //            Varer.Add(newVareModel);
    //            SelectedShopItem = newVareModel;
    //            await AddVare();
    //            //newVareModel = null;
    //            //SelectedShopItem = null;
    //        }

    //    }
    //    justUpdateVare = false;
    //}
    //private void HideModal()
    //{
    //    newVareModel = null;
    //    justUpdateVare = false;

    //}
    #endregion

}