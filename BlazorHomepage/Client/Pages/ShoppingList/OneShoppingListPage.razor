@page "/shoppinglist/{id}"



@if (newVareModel != null)
{
    <Modal @ref="_modalRef">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Legg til vare</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit @bind-Text="@newVareModel.Name" />
                </Field>
                <Field>
                    <FieldLabel>Enhet</FieldLabel>
                    <TextEdit @bind-Text="@newVareModel.Unit" />
                </Field>
                <Field>
                    <FieldLabel>Kategori</FieldLabel>
                    <Autocomplete Data="@AvailableCategories"
                                  TextField="@(f => f.Name)"
                                  ValueField="@(f => @SelectCatValue(f))"
                                  Placeholder="Kategori for varen?"
                                  @onkeyup="@OnItemCategoryListItemKeyUpHandler"
                                  SearchChanged="@searchChangeHandlerItemCat"
                                  SelectedValue="@SelectedItemCategory"
                                  SelectedValueChanged="@((item) => SelectedShopItemChanged(item))">
                    </Autocomplete>
                    <Button class="@showAddBtn">Legg til</Button>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@HideModalAndSave">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}


@if (ThisShoppingList != null)
{
    <div class="container todoapp commonviews">
        <h2 class="@showH2LabelStyle" @ondblclick="@ListHeaderKeyUpEventHandler">@ThisShoppingList.Name</h2>
        <input class="@showEditHeader" @bind-value="@ThisShoppingList.Name" @onkeyup="@(f => ListHeaderClickEventHandler(f))" />

        <div class="row">
            <div class="col">
                <Autocomplete Data="@Varer"
                              TextField="@(f => f.Name)"
                              ValueField="@((item) => item)"
                              Placeholder="Hva skal handles?"
                              @onkeyup="OnKeyUpNewListItemHandler"
                              SelectedValue="@SelectedShopItem"
                              SearchChanged="@searchChangeHandler"
                              SelectedValueChanged="@((item) => SelectedShopItemChanged(item))">
                </Autocomplete>
            </div>
        </div>
        <div class="row">
            <div class="container">
                <ul class="todo-list">
                    @foreach (var vare in ThisShoppingListItems)
                    {
                        <li class="@vare.CssComleteEditClassName">
                            <div class="parent-horizontal-stack">
                                <div class="col-1">
                                    <Check TValue="bool" Checked="vare.IsDone" CheckedChanged="@(f => VareCheckChanged(f, vare))"></Check>
                                </div>
                                <div class="col">

                                    <label>
                                        @vare.Varen.Name
                                    </label>
                                </div>
                                <div class="col-3">
                                    <input class="vareInputEdit" @bind-value="vare.Mengde" />
                                </div>
                                <div class="col-3">
                                    <button class="btn btn-sm btn-outline-danger commandBtns"
                                            @onclick="@(e => DeleteVare(vare))">
                                        <i class="fas fa-ban"></i>
                                    </button>
                                </div>
                            </div>

                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="row">
            <ListSummaryFooter NItems="@ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).Count()"
                               DeleteAllCompletedClikced="@(f => DeleteAllClicked())"
                               FilterList="@(f=> FilterList(f))"
                               ShowDeleteAll="@(ThisShoppingList.ShoppingItems.Where(f=>f.IsDone).Any())">
            </ListSummaryFooter>
        </div>
    </div>


}
else
{
    <p>loading...</p>
}
@code{

    string activeListFiler = "all";
    string showAddBtn = "hidden";
    string showEditHeader = "hidden";
    string showH2LabelStyle = "";
    //void handleChange(ShopItemModel value) => SelectedShopItem = value;
    private Modal _modalRef;
    ShopItemModel newVareModel = new ShopItemModel();
    string _tempVareName;
    string _tempItemCatName;

    [Parameter]
    public string Id { get; set; }
    public ShopItemModel SelectedShopItem { get; set; }
    public ItemCategoryModel SelectedItemCategory { get; set; }
    public ShoppingListModel ThisShoppingList { get; set; }
    public ICollection<ShoppingListItemModel> ThisShoppingListItems { get; set; }
    public ICollection<ShopItemModel> Varer { get; set; }
    public ICollection<ItemCategoryModel> AvailableCategories { get; set; }

    //[Inject]
    //public IShoppingListDataManager ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShoppingListModel> ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShopItemModel> ShopItemsDataManager { get; set; }
    [Inject]
    public IGenericRepository<ItemCategoryModel> ItemsCategoriesDataManager { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        var ok = !string.IsNullOrEmpty(Id);
        if (!ok)
            return;

        ThisShoppingList = await ShoppingListDataManager.Get(Id);
        ThisShoppingListItems = ThisShoppingList.ShoppingItems;

        FilterList(activeListFiler);
        Varer = await ShopItemsDataManager.Get();
        AvailableCategories = await ItemsCategoriesDataManager.Get();
    }

    public async Task DeleteVare(ShoppingListItemModel m)
    {
        ThisShoppingList.ShoppingItems.Remove(m);

        var updated = await ShoppingListDataManager.Update(ThisShoppingList);
        ThisShoppingList = updated;
        FilterList(activeListFiler);
    }

    private string NewVareName { get; set; }

    private async Task AddVare()
    {
        if (SelectedShopItem == null)
        {
            if (!string.IsNullOrEmpty(_tempVareName))
            {
                newVareModel = new ShopItemModel();
                newVareModel.Name = _tempVareName;
                _modalRef.Show();
                return;
            }
            else
                return;
        }

        var newItem = new ShoppingListItemModel() { Mengde = 1, IsDone = false, Varen = SelectedShopItem };
        ThisShoppingList.ShoppingItems.Add(newItem);
        await ShoppingListDataManager.Update(ThisShoppingList);
        SelectedShopItem = null;
        _tempVareName = string.Empty;
        FilterList(activeListFiler);
    }



    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
            await AddVare();
    }
    private async Task OnItemCategoryListItemKeyUpHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
        {
            if (string.IsNullOrEmpty(_tempItemCatName)) return;
            var itemCat = new ItemCategoryModel();
            itemCat.Name = _tempItemCatName;
            await ItemsCategoriesDataManager.Insert(itemCat).ContinueWith(f =>
            {
                AvailableCategories.Append(f.Result);
            });
            _tempItemCatName = string.Empty;
        }
    }


    void ListHeaderKeyUpEventHandler()
    {
        showH2LabelStyle = "hidden";
        showEditHeader = "";
    }
    async Task ListHeaderClickEventHandler(KeyboardEventArgs args)
    {

        if (args.Code.Equals("Enter"))
        {
            showH2LabelStyle = "";
            showEditHeader = "hidden";
            await ShoppingListDataManager.Update(ThisShoppingList);
        }
    }
    void SelectedShopItemChanged(object newValue)
    {
        if (newValue is ShopItemModel item)
            SelectedShopItem = item;
        if (newValue is ItemCategoryModel itemCat)
        {
            SelectedItemCategory = itemCat;
            newVareModel.ItemCategory = itemCat;
        }
    }

    void searchChangeHandlerItemCat(string value)
    {
        _tempItemCatName = value;
    }

    void searchChangeHandler(string value)
    {
        _tempVareName = value;
    }

    private void CheckAllItems(bool f)
    {
        foreach (var vare in ThisShoppingList.ShoppingItems)
        {
            vare.IsDone = f;
        }

    }
    private void VareCheckChanged(object f, ShoppingListItemModel vare)
    {
        if (f is bool bValue)
        {
            vare.IsDone = bValue;
            FilterList(activeListFiler);
        }

    }

    public async Task DeleteAllClicked()
    {
        var completed = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
        foreach (var item in completed)
        {
            await ShoppingListDataManager.Delete(item);
            ThisShoppingList.ShoppingItems.Remove(item);
        }
        FilterList(activeListFiler);
    }
    public void FilterList(object value)
    {
        if (value is string sValue)
        {
            activeListFiler = sValue;
            if (activeListFiler.Equals("done"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
            }
            else if (activeListFiler.Equals("active"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).ToList();
            }
            else //all
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems;

            }
        }
    }

    #region Modal handling

    private ItemCategoryModel SelectCatValue(ItemCategoryModel model)
    {
        if (model == null) showAddBtn = "";
        else
        {
            showAddBtn = "hidden";
        }
        return model;
    }

    private async Task HideModalAndSave()
    {

        if (newVareModel != null)
        {
            await ShopItemsDataManager.Insert(newVareModel);
            Varer.Append(newVareModel);
        }
        _modalRef.Hide();
    }
    private void HideModal()
    {
        newVareModel = null;
        _modalRef.Hide();
    }
    #endregion

}