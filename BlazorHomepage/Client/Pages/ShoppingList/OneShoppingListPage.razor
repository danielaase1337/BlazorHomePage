@page "/shoppinglist/{id}"
@if (ThisShoppingList != null)
{

    <div class="container">
        <h2>@ThisShoppingList.Name</h2>
        <div class="row" style="flex-wrap:nowrap">

            <div class="col" style="flex-wrap:nowrap">
                @*<div class="main">
                        <input class="toggle-all" type="checkbox" @onchange="CheckAllItems" />
                        <label for="toggle-all">Mark all as complete</label>
                    </div>*@
                <Autocomplete Data="@Varer"
                              TextField="@((item) => item.Name)"
                              ValueField="@((item) => item)"
                              Placeholder="Hva skal handles?"
                              @onkeyup="OnKeyUpNewListItemHandler"
                              SelectedValue="@SelectedShopItem"
                              SelectedValueChanged="@((item) => SelectedShopItemChanged(item))"></Autocomplete>
            </div>

        </div>
        <div class="row">
            <div class="container">
                <ul class="todo-list">
                    @foreach (var vare in ThisShoppingListItems)
                    {
                        <li class="@vare.CssComleteEditClassName">
                            <div class="parent-horizontal-stack">
                                <div class="col-1" style="width:40px">
                                    <input class="checkInput" type="checkbox" @onchange="@(f => { if(f != null){ vare.IsDone = (bool)f.Value; } })" />
                                </div>
                                <div class="col">

                                    <label>
                                        @vare.Varen.Name
                                    </label>
                                </div>
                                <div class="col-3">
                                    <input class="vareInputEdit" @bind-value="vare.Mengde" />
                                </div>
                                <div class="col-3">
                                    <button class="btn btn-sm btn-outline-danger commandBtns" @onclick="@(e => DeleteVare(vare))"><i class="fas fa-ban"> </i></button>
                                </div>
                            </div>

                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="row">
            <ListSummaryFooter NItems="@ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).Count()" DeleteAllCompletedClikced="@(f => DeleteAllClicked())" FilterList="@(f=> FilterList(f))" ShowDeleteAll="@(ThisShoppingList.ShoppingItems.Where(f=>f.IsDone).Any())"></ListSummaryFooter>
        </div>
    </div>


}
else
{
    <p>loading...</p>
}
@code{

    void handleChange(ShopItemModel value) => SelectedShopItem = value;

    [Parameter]
    public string Id { get; set; }

    public ShopItemModel SelectedShopItem { get; set; }

    public ShoppingListModel ThisShoppingList { get; set; }
    public ICollection<ShoppingListItemModel> ThisShoppingListItems { get; set; }

    public List<ShopItemModel> Varer { get; set; }

    [Inject]
    public IShoppingListDataManager ShoppingListDataManager { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var ok = int.TryParse(Id, out int idAsInt);
        if (!ok)
            return;
        await ShoppingListDataManager.GetOneShoppingListAsync(idAsInt).ContinueWith(f =>
        {
            if (f.Result != null)
            {
                ThisShoppingList = f.Result;
                ThisShoppingListItems = ThisShoppingList.ShoppingItems;
            };
        });
        Varer = await ShoppingListDataManager.GetAllShopItemsAsync();

    }
    public async Task DeleteVare(ShoppingListItemModel m)
    {
        ThisShoppingList.ShoppingItems.Remove(m);

        var updated = await ShoppingListDataManager.Update<ShoppingListModel>(ThisShoppingList);
        ThisShoppingList = updated;
    }

    private string NewVareName { get; set; }

    private async Task AddVare()
    {
        if (SelectedShopItem == null) return;
        var newItem = new ShoppingListItemModel() { Mengde = 1, IsDone = false, Varen = SelectedShopItem };
        ThisShoppingList.ShoppingItems.Add(newItem);
        await ShoppingListDataManager.Update<ShoppingListModel>(ThisShoppingList);
        SelectedShopItem = null;
    }



    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
            await AddVare();
    }

    void SelectedShopItemChanged(object newValue)
    {
        if (newValue is ShopItemModel item)
            SelectedShopItem = item;

    }



    private bool _lastCheckAllState = false;
    private void CheckAllItems(bool f)
    {
        foreach (var vare in ThisShoppingList.ShoppingItems)
        {
            vare.IsDone = f;
        }

    }

    public async Task DeleteAllClicked()
    {
        var completed = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
        foreach (var item in completed)
        {
            await ShoppingListDataManager.Delete(item);
            ThisShoppingList.ShoppingItems.Remove(item);

        }
    }
    public void FilterList(object value)
    {
        if (value is string sValue)
        {
            if (sValue.Equals("dove"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
            }
            else if (sValue.Equals("active"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).ToList();
            }
            else //all
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems;

            }
        }
    }
    //private void CheckAllItems()
    //{
    //    _lastCheckAllState = !_lastCheckAllState;
    //    foreach (var vare in ThisShoppingList.ShoppingItems)
    //    {
    //        vare.IsDone = _lastCheckAllState;
    //    }

    //}

}