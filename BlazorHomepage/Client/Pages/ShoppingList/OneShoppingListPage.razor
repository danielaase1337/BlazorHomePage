@page "/shoppinglist/{id}"
@if (ThisShoppingList != null)
{



    <div class="header">
        <h2>@ThisShoppingList.Name</h2>
        @*<span>
                <input class="new-todo" placeholder="Navn?" name="newVare" @bind="@NewVareName" @onkeyup="OnKeyUpNewListItemHandler">
                <Button class="btn btn-outline-success" Clicked="@(f=> AddVare())"><span><i class="fas fa-plus-circle"></i></span></Button>
            </span>*@
       
           <Autocomplete Data="@Varer" 
                         TextField="@((item) => item.Name)"
                         ValueField="@((item) => item.Name)"
                         Placeholder="navn?"/>
    </div>

    @if (ThisShoppingList.IsDone)
    {
        <p>Ferdig handlet</p>
    }
    else
    {
        <ul class="todo-list">
            @foreach (var vare in ThisShoppingList.ShoppingItems)
            {
                <li>
                    <OneShoppingListItemComponent OneShoppingListItem="vare" DeleteVareCallback="@(f=> DeleteVare(vare))" />
                </li>
            }
        </ul>
    }
}
else
{
    <p>loading...</p>
}
@code{

    void handleChange(ShopItemModel value) => SelectedShopItem = value;

    [Parameter]
    public string Id { get; set; }

    public ShopItemModel SelectedShopItem { get; set; }

    public ShoppingListModel ThisShoppingList { get; set; }

    public List<ShopItemModel> Varer { get; set; }

    [Inject]
    public IShoppingListDataManager ShoppingListDataManager { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var ok = int.TryParse(Id, out int idAsInt);
        if (!ok)
            return;
        await ShoppingListDataManager.GetOneShoppingListAsync(idAsInt).ContinueWith(f =>
        {
            if (f.Result != null)
                ThisShoppingList = f.Result;
        });
        Varer = await ShoppingListDataManager.GetAllShopItemsAsync();

    }
    public async Task DeleteVare(ShoppingListItemModel m)
    {
        ThisShoppingList.ShoppingItems.Remove(m);

        var updated = await ShoppingListDataManager.Update<ShoppingListModel>(ThisShoppingList);
        ThisShoppingList = updated;
    }

    private string NewVareName { get; set; }

    private async Task AddVare()
    {
        if (string.IsNullOrEmpty(NewVareName)) return;
        var newItem = new ShoppingListItemModel() { Mengde = 1, IsDone = false, Varen = new ShopItemModel() { Name = NewVareName } };

    }
    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
            await AddVare();
    }

}