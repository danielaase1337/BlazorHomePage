@page "/shoppinglist/{id}"



@if (newVareModel != null)
{
    @*<Modal @ref="_modalRef">*@
    @* <ModalContent IsCentered="true">
        <ModalHeader>
        <ModalTitle>Legg til vare</ModalTitle>
        <CloseButton Clicked="@HideModal" />
        </ModalHeader>
        <ModalBody>
        <Field>
        <FieldLabel>Name</FieldLabel>
        <TextEdit @bind-Text="@newVareModel.Name" />
        </Field>
        <Field>
        <FieldLabel>Enhet</FieldLabel>
        <TextEdit @bind-Text="@newVareModel.Unit" />
        </Field>
        <Field>
        <FieldLabel>Kategori</FieldLabel>
        <div class="row">
        <div class="col">
        <Autocomplete @ref="_itemCategoriyAutoComplete" TValue="ItemCategoryModel" TItem="ItemCategoryModel" Data="@AvailableCategories"
        TextField="@(f => f.Name)"
        ValueField="@(f => f)"
        Placeholder="Kategori for varen?"
        @onkeyup="@OnItemCategoryListItemKeyUpHandler"
        SearchChanged="@searchChangeHandlerItemCat"
        SelectedValue="@SelectedItemCategory"
        SelectedValueChanged="@(item => SelectedShopItemChanged(item))">
        </Autocomplete>
        </div>
        <div class="col-2">
        <Tooltip Text="Legg til ny kategori">
        <Button Clicked="@(f => AddCategory())"><i class="fas fa-plus"></i></Button>
        </Tooltip>
        </div>
        </div>
        </Field>
        @if (newVareModel.ItemCategory != null)
        {
        <FieldLabel>Valgt kategori: </FieldLabel>
        <FieldLabel><b>@newVareModel.ItemCategory.Name</b></FieldLabel>
        }
        </ModalBody>
        <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
        <Button Color="Color.Primary" Clicked="@HideModalAndSave">Lagre og lukk</Button>
        </ModalFooter>
        </ModalContent>*@
    @*</Modal>*@

    <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
        <DialogTemplates>
            <Header> Legg til vare </Header>
            <Content>
                <div class="container">

                    <div class="row">
                        <SfTextBox Placeholder='Vare navn' FloatLabelType='@FloatLabelType.Auto' 
                        @bind-Value=@newVareModel.Name></SfTextBox>
                    </div>
                    <div class="row" style="padding:2px">
                        <SfAutoComplete TValue="string"
                                    TItem="ItemCategoryModel"
                                    DataSource="@AvailableCategories"
                                    Placeholder="Velg kategori?"
                                    AllowFiltering="true">
                            <AutoCompleteFieldSettings Value="Name" Text="Name" />
                            <AutoCompleteEvents TItem="ItemCategoryModel" TValue="string"
                                            ValueChange="@SelectedItemCategoryChanged"></AutoCompleteEvents>
                        </SfAutoComplete>
                    </div>
                    <div class="row">
                        <p>Valgt kategori: </p>
                        @if (newVareModel.ItemCategory != null)
                        {
                            <p>@newVareModel.ItemCategory.Name</p>
                        }
                    </div>

                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Lager" IsPrimary="true" OnClick="@HideModalAndSave" />
            <DialogButton Content="Avbry" OnClick="@HideModal" />
        </DialogButtons>
    </SfDialog>

}


@if (ThisShoppingList != null)
{

    <div class="card-maincontainer container-sm">
        <div class="card">
            <div class="row">
                <div class="col">
                    <h5 class="@showH2LabelStyle" @ondblclick="@ListHeaderKeyUpEventHandler">@ThisShoppingList.Name</h5>
                    <input class="@showEditHeader" @bind-value="@ThisShoppingList.Name" @onkeyup="@(f => ListHeaderClickEventHandler(f))" />
                </div>
                <div class="col">
                    <button class="btn btn-sm btn-outline-info" @onclick="SortShoppingList"><i class="fas fa-sort-amount-down-alt"></i></button>

                    @*<Dropdown>
                        <DropdownToggle Color="Color.Info" Size="Size.Small" Outline="true">
                        @dropdownText
                        </DropdownToggle>
                        <DropdownMenu>
                        @foreach (var shop in AvailableShops)
                        {
                        <DropdownItem Clicked="@(f => SelectedShopClicked(shop))">@shop.Name</DropdownItem>
                        }
                        </DropdownMenu>
                        </Dropdown>*@
                </div>


            </div>

            <div class="row">
                <div class="col">
                    <SfAutoComplete TValue="string"
                                TItem="ShopItemModel"
                                DataSource="@Varer"
                                Placeholder="Hva skal handles?">
                        <AutoCompleteFieldSettings Value="Name" Text="Name" />
                        <AutoCompleteEvents TItem="ShopItemModel" TValue="string"
                                        ValueChange="@SelectedShopItemChanged"></AutoCompleteEvents>
                    </SfAutoComplete>
                </div>
                <div class="col-2 contenAlignCenter">
                    @*<button class="btn btn-sm" @onclick="@AddVare"><i class="fas fa-plus"></i></button>*@
                    @*<SfButton class="btn btn-sm" @onclick="@AddVare"><i class="fas fa-plus"></i></SfButton>*@
                    @* <SfButton @onclick="@(()=> AddVare(@SelectedShopItem))" CssClass="e-flat" IsPrimary="true">
                        <content>
                        <i class="fas fa-plus"></i>
                        </content>
                        </SfButton>*@
                </div>
            </div>
        </div>

        @if (!ThisShoppingListItems.Any())
        {
            <div class="card">
                <div class="row">
                    <h6>Handelisten er tom, legg til varer for å komme igang.</h6>
                </div>
            </div>

        }
        else
        {
            <div class="card">
                <div class="row">
                    <ul class="todo-list">
                        @foreach (var vare in ThisShoppingListItems)
                        {
                            <li class="@vare.CssComleteEditClassName">
                                <div class="parent-horizontal-stack">
                                    <div class="col-1">
                                        <input type="checkbox" checked="@vare.IsDone" @onchange="@(f=> VareCheckChanged(f, vare))" />
                                    </div>
                                    <div class="col">
                                        <a @onclick="@(f => VareClicked(vare.Varen))">
                                            @vare.Varen.Name
                                        </a>
                                    </div>
                                    <div class="col-3">
                                        <input class="vareInputEdit" @bind-value="vare.Mengde" @onfocusout="(f=> VareMengdeFocusLost())" />
                                    </div>
                                    <div class="col-2">
                                        <button class="commandBtns"
                                    @onclick="@(e => DeleteVare(vare))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>

                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
        <div class="row">
            <ListSummaryFooter NItems="@ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).Count()"
                           DeleteAllCompletedClikced="@(f => DeleteAllClicked())"
                           FilterList="@(f=> FilterList(f))"
                           ShowDeleteAll="@(ThisShoppingList.ShoppingItems.Where(f=>f.IsDone).Any())">
            </ListSummaryFooter>
        </div>
    </div>


}
else
{
    <LoadingComponent></LoadingComponent>
}
@code {

    string activeListFiler = "all";
    string showEditHeader = "hidden";
    string showH2LabelStyle = "";
    string dropdownText = "Velg buikk";


    [Parameter]
    public string Id { get; set; }

    ShopItemModel? newVareModel = new ShopItemModel();

    public ShoppingListModel ThisShoppingList { get; set; }
    public ICollection<ShoppingListItemModel> ThisShoppingListItems { get; set; }
    public ICollection<ShopItemModel> Varer { get; set; }
    public ICollection<ItemCategoryModel> AvailableCategories { get; set; }
    ICollection<ShopModel> AvailableShops { get; set; }

    [Inject]
    public IGenericRepository<ShoppingListModel> ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShopItemModel> ShopItemsDataManager { get; set; }
    [Inject]
    public IGenericRepository<ItemCategoryModel> ItemsCategoriesDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShopModel> ShopDataManager { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        var ok = !string.IsNullOrEmpty(Id);
        if (!ok)
            return;
        ThisShoppingList = await ShoppingListDataManager.Get(Id);
        ThisShoppingListItems = ThisShoppingList.ShoppingItems;

        FilterList(activeListFiler);
        Varer = await ShopItemsDataManager.Get();

        AvailableCategories = await ItemsCategoriesDataManager.Get();

        AvailableShops = await ShopDataManager.Get();

    }

    public async Task DeleteVare(ShoppingListItemModel m)
    {
        ThisShoppingList.ShoppingItems.Remove(m);

        var updated = await ShoppingListDataManager.Update(ThisShoppingList);
        ThisShoppingList = updated;
        FilterList(activeListFiler);
    }

    private async Task AddVare(ShopItemModel shopItem)
    {
        ShoppingListItemModel newItem = new ShoppingListItemModel() { Mengde = 1, IsDone = false, Varen = shopItem };
        ThisShoppingList.ShoppingItems.Add(newItem);
        await ShoppingListDataManager.Update(ThisShoppingList);
        FilterList(activeListFiler);
    }

    private async Task AddCategory(ItemCategoryModel newCategory)
    {
        var existing = AvailableCategories.FirstOrDefault(f => f.Name.ToLower().Equals(newCategory.Name.ToLower()));
        if (existing != null)
        {
            if (newVareModel != null)
                newVareModel.ItemCategory = existing;
            return;
        }
        else
        {
            var newCat = await ItemsCategoriesDataManager.Insert(newCategory);
            AvailableCategories.Add(newCat);
            if (newVareModel != null)
                newVareModel.ItemCategory = newCat;
        }

    }

    void VareClicked(ShopItemModel varen)
    {
        Console.Write(varen.Name);
        newVareModel = varen;
        justUpdateVare = true;
        this.IsVisible = true;

    }

    void ListHeaderKeyUpEventHandler()
    {
        showH2LabelStyle = "hidden";
        showEditHeader = "";
    }
    async Task ListHeaderClickEventHandler(KeyboardEventArgs args)
    {

        if (args.Code.Equals("Enter"))
        {
            showH2LabelStyle = "";
            showEditHeader = "hidden";
            await ShoppingListDataManager.Update(ThisShoppingList);
        }
    }
    async Task SelectedShopItemChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ShopItemModel> newValue)
    {
        if (newValue == null) return;
        if (newValue.ItemData is ShopItemModel item)
        {
            if (item.IsValid())
                await AddVare(item);
            else
            {
                newVareModel = new ShopItemModel();
                newVareModel.Name = item.Name;
                IsVisible = true;
            }

        }
    }

    async Task SelectedItemCategoryChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ItemCategoryModel> selectedCategory)
    {
        if (selectedCategory.ItemData is ItemCategoryModel itemCat)
        {
            await AddCategory(itemCat);
        }
    }

    private async Task CheckAllItems(bool f)
    {
        foreach (var vare in ThisShoppingList.ShoppingItems)
        {
            vare.IsDone = f;
        }
        await ShoppingListDataManager.Update(ThisShoppingList);

    }
    private async Task VareCheckChanged(Microsoft.AspNetCore.Components.ChangeEventArgs f, ShoppingListItemModel vare)
    {
        if(f.Value is bool bValue)
        {
            Console.WriteLine("bvalue");
            vare.IsDone = bValue;
            FilterList(activeListFiler);
            await ShoppingListDataManager.Update(ThisShoppingList);            
        }


    }

    public async Task VareMengdeFocusLost()
    {
        await ShoppingListDataManager.Update(ThisShoppingList);
    }

    public async Task DeleteAllClicked()
    {
        var completed = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
        foreach (var item in completed)
        {
            await ShoppingListDataManager.Delete(item);
            ThisShoppingList.ShoppingItems.Remove(item);
        }
        FilterList(activeListFiler);
    }
    public void FilterList(object value)
    {
        if (value is string sValue)
        {
            activeListFiler = sValue;
            if (activeListFiler.Equals("done"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();
            }
            else if (activeListFiler.Equals("active"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).ToList();
            }
            else //all
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems;
            }
        }
    }

    ShopModel SelectedShop { get; set; }
    void SelectedShopClicked(ShopModel selectedShop)
    {
        SelectedShop = selectedShop;
        dropdownText = selectedShop.Name;
    }
    void SortShoppingList()
    {
        if (SelectedShop == null) return; //TODO - lag notifikasjon..
                                          //Insert Sort index on itemCats.
        var itemCategoriesWithShortIndex = new List<ItemCategoryModel>();
        foreach (var shelfst in SelectedShop.ShelfsInShop)
        {
            var startSort = shelfst.SortIndex;
            foreach (var cat in shelfst.ItemCateogries)
            {
                startSort += 1;
                cat.SortIndex = startSort;
                itemCategoriesWithShortIndex.Add(cat);
            }
        }

        foreach (var item in ThisShoppingList.ShoppingItems)
        {
            var cat = item.Varen.ItemCategory;
            var thisCatSort = itemCategoriesWithShortIndex.FirstOrDefault(f => f.Id.Equals(cat.Id));
            if (thisCatSort != null)
                item.Varen.ItemCategory.SortIndex = thisCatSort.SortIndex;
        }


        ThisShoppingList.ShoppingItems = ThisShoppingList.ShoppingItems.OrderBy(f => f.Varen.ItemCategory.SortIndex).ToList();
        FilterList(activeListFiler);
    }
    #region Modal handling

    private bool IsVisible { get; set; } = false;
    bool justUpdateVare = false;
    private async Task HideModalAndSave()
    {

        if (newVareModel != null)
        {
            if (!newVareModel.IsValid()) return;

            if (justUpdateVare)
                await ShopItemsDataManager.Update(newVareModel);
            else
            {
                if (newVareModel.IsValid())
                {
                    await ShopItemsDataManager.Insert(newVareModel);
                    Varer.Add(newVareModel);
                    await AddVare(newVareModel);
                }
            }

        }
        justUpdateVare = false;
        this.IsVisible = false;

    }
    private void HideModal()
    {
        newVareModel = null;
        justUpdateVare = false;
        this.IsVisible = false;
    }
    #endregion

}