@page "/shoppinglist"
<div class="container todoapp commonviews">
    @if (_sLists != null)
    {
        <div class="row header">
            <div class="col">
                <h2>Handlelister</h2>
                <input class="new-todo" placeholder="Navn?" name="newVare" @bind="@_newListName" @onkeyup="OnKeyUpNewListItemHandler">
            </div>
        </div>
        <div class="row">
            <div class="col">
                <ul class="todo-list">
                    @foreach (var l in _sLists)
                    {
                        <li class="@l.CssComleteEditClassName">
                            <div class="parent-horizontal-stack">
                                <div class="col-1">
                                    <input type="checkbox" value="@l.IsDone" @onchange="@(f => ListeChecked(l, f))" />
                                </div>
                                <div class="col">
                                    @if (l.EditClicked)
                                    {
                                        <input class="editing" @bind-value="@(l.Name)" />
                                    }
                                    else
                                    {
                                        <label>
                                            <a href="@(GetItemNavLink(l.Id))">@l.Name</a>
                                        </label>
                                    }
                                </div>
                                <div class="col">
                                    @if (l.EditClicked)
                                    {
                                        <button class="btn btn-sm btn-outline-success" @onclick="@(e => StoreChange(l))"><i class="fas fa-check"></i></button>
                                        <button class="btn btn-sm btn-outline-warning" @onclick="@(e => { l.EditClicked= false;  })"><i class="fas fa-times"> </i></button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="@(e => DeleteList(l))"><i class="fas fa-ban"> </i></button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-primary endre" @onclick="@(e => { l.EditClicked = true;  })"><i class="fas fa-edit"></i></button>
                                    }
                                </div>
                            </div>
                        </li>
                    }

                </ul>
            </div>
        </div>
    }
    else
    {
        <p>Ingen lister eller laster</p>
    }
</div>

@code {
    TempDataInit tempDataInit;
    [Inject]
    public IGenericRepository<User> UserDataManager { get; set; }

    //[Inject]
    //public IShoppingListDataManager ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShoppingListModel> ShoppingListDataManager { get; set; }
    [Inject]
    public IGenericRepository<ShopItemModel> ShopItemDataManager { get; set; }
    [Inject]
    public IGenericRepository<ItemCategoryModel> ShopItemCategoryDataManager { get; set; }


    private ICollection<ShoppingListModel> _sLists;

    private List<ShopItemModel> _tilgjengeligeVarer;
    public string _newListName { get; set; }

    private string GetItemNavLink(string listeId)
    {
        return $"shoppinglist/{listeId}";
    }
    protected override async Task OnInitializedAsync()
    {
        if (tempDataInit == null)
        {
            tempDataInit = new TempDataInit();
            await AddDummyValues();
        }

        _sLists = await ShoppingListDataManager.Get();
    }
    private string editCssStyle = "";





    [Parameter]
    public EventCallback<ShoppingListItemModel> StoreChangeCallback { get; set; }
    private async Task StoreChange(ShoppingListModel item)
    {
        item.EditClicked = false;
        await ShoppingListDataManager.Update(item);
    }

    [Parameter]
    public EventCallback<ShoppingListModel> DeleteEventCallback { get; set; }
    private async Task DeleteList(ShoppingListModel l)
    {
        await ShoppingListDataManager.Delete(l).ContinueWith(f =>
        {
            if (f.Result)
                _sLists = _sLists.Where(f => f.Id != l.Id).ToList();
        });

    }
    private async Task AddList()
    {
        if (string.IsNullOrWhiteSpace(_newListName)) return;
        var newItem = new ShoppingListModel() { Name = _newListName };
        await ShoppingListDataManager.Insert(newItem).ContinueWith(f =>
        {
            if (f.Result != null)
            {
                _sLists.Append(f.Result);
                _newListName = string.Empty;
            }
        });
    }


    private void ListeChecked(ShoppingListModel l, ChangeEventArgs value)
    {
        if (value?.Value != null && value.Value is bool bValue)
            l.IsDone = bValue;
    }
    private void toogelAllClicked()
    {

    }

    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
            await AddList();
    }


    #region Temp
    private async Task AddDummyValues()
    {
        var t =await  ShoppingListDataManager.Get();
        if (t.Any())
            return; 

        await tempDataInit.InsertDefaultCategories(ShopItemCategoryDataManager);
        await tempDataInit.InsertDefaultShopItems(ShopItemDataManager);
        await tempDataInit.InsertDefaultShoppingList(ShoppingListDataManager);
    }
    #endregion

}
