@page "/shoppinglist"
<div class="container">
    @if (_sLists != null)
    {
        <h2>Handlelister</h2>
        <input class="new-todo" placeholder="Navn?" name="newVare" @bind="@_newListName" @onkeyup="OnKeyUpNewListItemHandler">
        <ul class="todo-list">
            @foreach (var l in _sLists)
            {
                <li class="@l.CssComleteEditClassName">
                    <div class="parent-horizontal-stack">
                        <div class="col-1">
                            <input type="checkbox" value="@l.IsDone" @onchange="@(f => ListeChecked(l, f))" />
                        </div>
                        <div class="col">
                            @if (l.EditClicked)
                            {
                                <input class="editing" @bind-value="@(l.Name)" />
                            }
                            else
                            {
                                <label>
                                    <a href="@(GetItemNavLink(l.ListId))">@l.Name</a>
                                </label>
                            }
                        </div>
                        <div class="col-3 parent-horizontal-stack">
                            @if (l.EditClicked)
                            {
                                <button class="btn btn-sm btn-outline-success" @onclick="@(e => StoreChange(l))"><i class="fas fa-check"></i></button>
                                <button class="btn btn-sm btn-outline-warning" @onclick="@(e => { l.EditClicked= false;  })"><i class="fas fa-times"> </i></button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="@(e => DeleteList(l))"><i class="fas fa-ban"> </i></button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary endre" @onclick="@(e => { l.EditClicked = true;  })"><i class="fas fa-edit"></i></button>
                            }
                        </div>
                    </div>
                </li>
            }

        </ul>
    }
    else
    {
        <p>Ingen lister eller laster</p>
    }
</div>

@code {

    [Inject]
    public IUserDataManager<User> UserDataManager { get; set; }

    [Inject]
    public IShoppingListDataManager ShoppingListDataManager { get; set; }

    private List<ShoppingListModel> _sLists;
    private List<ShopItemModel> _tilgjengeligeVarer;
    public string _newListName { get; set; }

    private string GetItemNavLink(int listeId)
    {
        return $"shoppinglist/{listeId}";
    }
    protected override async Task OnInitializedAsync()
    {
        var res = await ShoppingListDataManager.GetAllShoppingListsAsync();
        _sLists = res.ToList();
        _tilgjengeligeVarer = await ShoppingListDataManager.GetAllShopItemsAsync();
    }

    



    private bool _editClicked = false;
    private bool _deleteClicked = false;

    [Parameter]
    public EventCallback<ShoppingListItemModel> StoreChangeCallback { get; set; }
    private async Task StoreChange(ShoppingListModel item)
    {
        item.EditClicked = false; 
        await ShoppingListDataManager.Update<ShoppingListModel>(item);
    }

    [Parameter]
    public EventCallback<ShoppingListModel> DeleteEventCallback { get; set; }
    private async Task DeleteList(ShoppingListModel l)
    {
        await ShoppingListDataManager.Delete(l).ContinueWith(f =>
        {
            if (f.Result)
                _sLists = _sLists.Where(f => f.ListId != l.ListId).ToList();
        });

    }
    private async Task AddList()
    {
        if (string.IsNullOrWhiteSpace(_newListName)) return;
        var newItem = new ShoppingListModel() { Name = _newListName };
        await ShoppingListDataManager.Add<ShoppingListModel>(newItem).ContinueWith(f =>
        {
            if (f.Result != null)
            {
                _sLists.Add(f.Result);
                _newListName = string.Empty;
            }
        });
    }


    private void ListeChecked(ShoppingListModel l, ChangeEventArgs value)
    {
        if (value?.Value != null && value.Value is bool bValue)
            l.IsDone = bValue;
    }
    private void toogelAllClicked()
    {

    }

    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
            await AddList();
    }

}
