@page "/shoppinglist"

@attribute [Authorize]

<div class="card-maincontainer container-sm">

    <div class="row card">
        <h2>Handlelister</h2>
        <div class="row">
            <div class="col">
                <input class="new-todo" placeholder="Navn på listen?" name="newVare" @bind="@_newListName" @onkeyup="OnKeyUpNewListItemHandler">
            </div>
            <div class="col-2">
                <Button Size="Size.Small"><i class="fas fa-check" @onclick="@(f => AddList())"></i></Button>
            </div>
        </div>
    </div>
    @if (ShoppingLists != null)
    {
        @if (!ShoppingLists.Any())
        {
            <div class="row card">
                <h6>
                    Det finnes ingen handlelister!
                </h6>
            </div>

        }
        else
        {
            <div class="row card">
                <ul class="todo-list">
                    @foreach (var l in ShoppingLists)
                    {
                        <li class="@l.CssComleteEditClassName">
                            <div class="parent-horizontal-stack">
                                <div class="col-1">
                                    <input type="checkbox" value="@l.IsDone" @onchange="@(f => ListeChecked(l, f))" />
                                </div>
                                <div class="col">
                                    @if (l.EditClicked)
                                    {
                                        <input class="editing" @bind-value="@(l.Name)" />
                                    }
                                    else
                                    {
                                        <a href="@(GetItemNavLink(l.Id))">@l.Name</a>
                                    }
                                </div>

                                @if (l.EditClicked)
                                {
                                    <div class="col-6">
                                        <Buttons>
                                            <Button Class="editButtonStyle" @onclick="@(e => StoreChange(l))"><i class="fas fa-check"></i></Button>
                                            <Button Class="editButtonStyle" @onclick="@(e => { l.EditClicked= false;  })"><i class="fas fa-times"> </i></Button>
                                            <Button Class="editButtonStyle" @onclick="@(e => DeleteList(l))"><i class="fas fa-ban"> </i></Button>
                                        </Buttons>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-2">
                                        <Button @onclick="@(e => { l.EditClicked = true;  })"><i class="fas fa-edit"></i></Button>
                                    </div>

                                }
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
    }
    else
    {
        <LoadingComponent> </LoadingComponent>
    }
</div>

@code {

    [Inject]
    public IGenericRepository<User> UserDataManager { get; set; }

    [Inject]
    public IGenericRepository<ShoppingListModel> ShoppingListDataManager { get; set; }

    private ICollection<ShoppingListModel> ShoppingLists;

    public string _newListName { get; set; }

    private string GetItemNavLink(string listeId)
    {
        return $"shoppinglist/{listeId}";
    }

    protected override async Task OnInitializedAsync()
    {
        ShoppingLists = await ShoppingListDataManager.Get();
        OrderLists();

    }





    [Parameter]
    public EventCallback<ShoppingListItemModel> StoreChangeCallback { get; set; }
    private async Task StoreChange(ShoppingListModel item)
    {
        item.EditClicked = false;
        await ShoppingListDataManager.Update(item);
    }

    [Parameter]
    public EventCallback<ShoppingListModel> DeleteEventCallback { get; set; }
    private async Task DeleteList(ShoppingListModel l)
    {
        var res = await ShoppingListDataManager.Delete(l);
        if (res)
            ShoppingLists.Remove(l);
    }

    private async Task AddList()
    {
        if (string.IsNullOrWhiteSpace(_newListName)) return;
        var newItem = new ShoppingListModel() { Name = _newListName };
        var res = await ShoppingListDataManager.Insert(newItem);
        if (res != null)
            ShoppingLists.Add(res);

            _newListName = string.Empty; 

        OrderLists();

    }


    private async Task ListeChecked(ShoppingListModel l, ChangeEventArgs value)
    {
        if (value?.Value != null && value.Value is bool bValue)
        {
            l.IsDone = bValue;
            await ShoppingListDataManager.Update(l);
        }
    }

    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code.Equals("Enter"))
            await AddList();
    }
    private void OrderLists()
    {
        ShoppingLists = ShoppingLists.OrderBy(f => f.Name).ToList();
    }

}
