@*@typeparam TItem where TItem : EntityBase
    //Må ha Generic constraints for å kunne fullføre denne implementasjonen. 

<h3>ListWithInputComponent</h3>


<div class="row">
    <div class="col">
        <ul class="todo-list">
            @foreach (var l in ObjectsInList)
            {
                <li class="@l.CssComleteEditClassName">
                    <div class="parent-horizontal-stack">
                        <div class="col">
                            @if (l.EditClicked)
                            {
                                <input class="editing" @bind-value="@(l.Name)" />
                            }
                            else
                            {
                                <label>
                                    <a href="@( GetItemNavLink(l.Id))">@l.Name</a>
                                </label>
                            }
                        </div>
                        <div class="col">
                            @if (l.EditClicked)
                            {
                                <button class="btn btn-sm btn-outline-success" @onclick="@(e => StoreChange(l))"><i class="fas fa-check"></i></button>
                                <button class="btn btn-sm btn-outline-warning" @onclick="@(e => { l.EditClicked= false;  })"><i class="fas fa-times"> </i></button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="@(e => DeleteItem(l))"><i class="fas fa-ban"> </i></button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary endre" @onclick="@(e => { l.EditClicked = true;  })"><i class="fas fa-edit"></i></button>
                            }
                        </div>
                    </div>
                </li>
            }

        </ul>
    </div>
</div>


@code {
    [Parameter]
    public ICollection<TItem> ObjectsInList { get; set; }

    [Parameter]
    public Type TypeToStore { get; set; }

    [Parameter]
    public IGenericRepository<TItem> DataManager { get; set; }

    private TItem SelectedItem { get; set; }

    private string GetItemNavLink(string id)
    {
        if (SelectedItem.GetType() == typeof(ShopModel))
        {
            return $"oneShop/{id}";
        }
        if (SelectedItem.GetType() == typeof(ShoppingListModel))
        {
            return $"shoppinglist/{id}";
        }
        return ""; //if not linkable..
    }
    async Task StoreChange(TItem item)
    {
        await DataManager.Update(item);
    }

    async Task DeleteItem(TItem item)
    {
        await DataManager.Delete(item);
    }





}*@
